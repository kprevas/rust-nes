use gen::z80::opcodes::AddrMode::*;
use gen::z80::opcodes::Condition::*;
use gen::z80::opcodes::IndexRegister::*;
use gen::z80::opcodes::Opcode::*;
use gen::z80::opcodes::Register::*;
use gen::z80::opcodes::RegisterPair::*;

#[derive(Debug, Copy, Clone)]
pub enum Register {
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    I,
    R,
    IXH,
    IXL,
    IYH,
    IYL,
}

#[derive(Debug, Copy, Clone)]
pub enum RegisterPair {
    AF,
    BC,
    DE,
    HL,
    SP,
    IXP,
    IYP,
}

#[derive(Debug, Copy, Clone)]
pub enum IndexRegister {
    IX,
    IY,
}

#[derive(Debug, Copy, Clone)]
pub enum AddrMode {
    Immediate,
    Relative,
    Extended,
    Indexed(IndexRegister),
    Register(Register),
    RegisterPair(RegisterPair),
    RegisterIndirect(RegisterPair),
}

#[derive(Debug, Copy, Clone)]
pub enum Condition {
    True,
    Carry,
    ParityOverflow,
    Sign,
    Zero,
    NoCarry,
    NoSign,
    NoParityOverflow,
    NoZero,
}

#[allow(non_camel_case_types)]
#[derive(Debug, Copy, Clone)]
pub enum Opcode {
    ADD(AddrMode, AddrMode),
    ADC(AddrMode, AddrMode),
    AND(AddrMode),
    CALL(Condition),
    CCF,
    CP(AddrMode),
    CPD,
    CPDR,
    CPI,
    CPIR,
    CPL,
    DAA,
    DEC(AddrMode),
    DI,
    DJNZ,
    EI,
    EX(AddrMode, AddrMode),
    EX_AF,
    EXX,
    HALT,
    IM(u8),
    IN(AddrMode, AddrMode),
    IN_Flags(AddrMode),
    IND,
    INDR,
    INI,
    INIR,
    INC(AddrMode),
    JR(Condition),
    JP(Condition),
    JP_Addr(AddrMode),
    JP_HL,
    LD(AddrMode, AddrMode),
    LDD,
    LDDR,
    LDI,
    LDIR,
    NEG,
    NOP,
    OR(AddrMode),
    OUT(AddrMode, AddrMode),
    OUTD,
    OUTDR,
    OUTI,
    OUTIR,
    OUT_Zero(AddrMode),
    POP(AddrMode),
    PUSH(AddrMode),
    RET(Condition),
    RETI,
    RETN,
    RLA,
    RLCA,
    RLD,
    RRA,
    RRCA,
    RRD,
    RST(u8),
    SBC(AddrMode, AddrMode),
    SCF,
    SUB(AddrMode),
    XOR(AddrMode),

    Bit,
    Ix,
    IxBit,
    Iy,
    IyBit,
    Misc,

    RL(AddrMode, AddrMode),
    RLC(AddrMode, AddrMode),
    RR(AddrMode, AddrMode),
    RRC(AddrMode, AddrMode),
    SLA(AddrMode, AddrMode),
    SLL(AddrMode, AddrMode),
    SRA(AddrMode, AddrMode),
    SRL(AddrMode, AddrMode),
    BIT(u8, AddrMode, AddrMode),
    RES(u8, AddrMode, AddrMode),
    SET(u8, AddrMode, AddrMode),
}

pub const OPCODES: [Opcode; 256] = [
    // 0x
    NOP,
    LD(RegisterPair(BC), Immediate),
    LD(RegisterIndirect(BC), Register(A)),
    INC(RegisterPair(BC)),
    INC(Register(B)),
    DEC(Register(B)),
    LD(Register(B), Immediate),
    RLCA,
    EX_AF,
    ADD(RegisterPair(HL), RegisterPair(BC)),
    LD(Register(A), RegisterIndirect(BC)),
    DEC(RegisterPair(BC)),
    INC(Register(C)),
    DEC(Register(C)),
    LD(Register(C), Immediate),
    RRCA,

    // 1x
    DJNZ,
    LD(RegisterPair(DE), Immediate),
    LD(RegisterIndirect(DE), Register(A)),
    INC(RegisterPair(DE)),
    INC(Register(D)),
    DEC(Register(D)),
    LD(Register(D), Immediate),
    RLA,
    JR(True),
    ADD(RegisterPair(HL), RegisterPair(DE)),
    LD(Register(A), RegisterIndirect(DE)),
    DEC(RegisterPair(DE)),
    INC(Register(E)),
    DEC(Register(E)),
    LD(Register(E), Immediate),
    RRA,

    // 2x
    JR(NoZero),
    LD(RegisterPair(HL), Immediate),
    LD(Extended, RegisterPair(HL)),
    INC(RegisterPair(HL)),
    INC(Register(H)),
    DEC(Register(H)),
    LD(Register(H), Immediate),
    DAA,
    JR(Zero),
    ADD(RegisterPair(HL), RegisterPair(HL)),
    LD(RegisterPair(HL), Extended),
    DEC(RegisterPair(HL)),
    INC(Register(L)),
    DEC(Register(L)),
    LD(Register(L), Immediate),
    CPL,

    // 3x
    JR(NoCarry),
    LD(RegisterPair(SP), Immediate),
    LD(Extended, Register(A)),
    INC(RegisterPair(SP)),
    INC(RegisterIndirect(HL)),
    DEC(RegisterIndirect(HL)),
    LD(RegisterIndirect(HL), Immediate),
    SCF,
    JR(Carry),
    ADD(RegisterPair(HL), RegisterPair(SP)),
    LD(Register(A), Extended),
    DEC(RegisterPair(SP)),
    INC(Register(A)),
    DEC(Register(A)),
    LD(Register(A), Immediate),
    CCF,

    // 4x
    LD(Register(B), Register(B)),
    LD(Register(B), Register(C)),
    LD(Register(B), Register(D)),
    LD(Register(B), Register(E)),
    LD(Register(B), Register(H)),
    LD(Register(B), Register(L)),
    LD(Register(B), RegisterIndirect(HL)),
    LD(Register(B), Register(A)),
    LD(Register(C), Register(B)),
    LD(Register(C), Register(C)),
    LD(Register(C), Register(D)),
    LD(Register(C), Register(E)),
    LD(Register(C), Register(H)),
    LD(Register(C), Register(L)),
    LD(Register(C), RegisterIndirect(HL)),
    LD(Register(C), Register(A)),

    // 5x
    LD(Register(D), Register(B)),
    LD(Register(D), Register(C)),
    LD(Register(D), Register(D)),
    LD(Register(D), Register(E)),
    LD(Register(D), Register(H)),
    LD(Register(D), Register(L)),
    LD(Register(D), RegisterIndirect(HL)),
    LD(Register(D), Register(A)),
    LD(Register(E), Register(B)),
    LD(Register(E), Register(C)),
    LD(Register(E), Register(D)),
    LD(Register(E), Register(E)),
    LD(Register(E), Register(H)),
    LD(Register(E), Register(L)),
    LD(Register(E), RegisterIndirect(HL)),
    LD(Register(E), Register(A)),

    // 6x
    LD(Register(H), Register(B)),
    LD(Register(H), Register(C)),
    LD(Register(H), Register(D)),
    LD(Register(H), Register(E)),
    LD(Register(H), Register(H)),
    LD(Register(H), Register(L)),
    LD(Register(H), RegisterIndirect(HL)),
    LD(Register(H), Register(A)),
    LD(Register(L), Register(B)),
    LD(Register(L), Register(C)),
    LD(Register(L), Register(D)),
    LD(Register(L), Register(E)),
    LD(Register(L), Register(H)),
    LD(Register(L), Register(L)),
    LD(Register(L), RegisterIndirect(HL)),
    LD(Register(L), Register(A)),

    // 7x
    LD(RegisterIndirect(HL), Register(B)),
    LD(RegisterIndirect(HL), Register(C)),
    LD(RegisterIndirect(HL), Register(D)),
    LD(RegisterIndirect(HL), Register(E)),
    LD(RegisterIndirect(HL), Register(H)),
    LD(RegisterIndirect(HL), Register(L)),
    HALT,
    LD(RegisterIndirect(HL), Register(A)),
    LD(Register(A), Register(B)),
    LD(Register(A), Register(C)),
    LD(Register(A), Register(D)),
    LD(Register(A), Register(E)),
    LD(Register(A), Register(H)),
    LD(Register(A), Register(L)),
    LD(Register(A), RegisterIndirect(HL)),
    LD(Register(A), Register(A)),

    // 8x
    ADD(Register(A), Register(B)),
    ADD(Register(A), Register(C)),
    ADD(Register(A), Register(D)),
    ADD(Register(A), Register(E)),
    ADD(Register(A), Register(H)),
    ADD(Register(A), Register(L)),
    ADD(Register(A), RegisterIndirect(HL)),
    ADD(Register(A), Register(A)),
    ADC(Register(A), Register(B)),
    ADC(Register(A), Register(C)),
    ADC(Register(A), Register(D)),
    ADC(Register(A), Register(E)),
    ADC(Register(A), Register(H)),
    ADC(Register(A), Register(L)),
    ADC(Register(A), RegisterIndirect(HL)),
    ADC(Register(A), Register(A)),

    // 9x
    SUB(Register(B)),
    SUB(Register(C)),
    SUB(Register(D)),
    SUB(Register(E)),
    SUB(Register(H)),
    SUB(Register(L)),
    SUB(RegisterIndirect(HL)),
    SUB(Register(A)),
    SBC(Register(A), Register(B)),
    SBC(Register(A), Register(C)),
    SBC(Register(A), Register(D)),
    SBC(Register(A), Register(E)),
    SBC(Register(A), Register(H)),
    SBC(Register(A), Register(L)),
    SBC(Register(A), RegisterIndirect(HL)),
    SBC(Register(A), Register(A)),

    // Ax
    AND(Register(B)),
    AND(Register(C)),
    AND(Register(D)),
    AND(Register(E)),
    AND(Register(H)),
    AND(Register(L)),
    AND(RegisterIndirect(HL)),
    AND(Register(A)),
    XOR(Register(B)),
    XOR(Register(C)),
    XOR(Register(D)),
    XOR(Register(E)),
    XOR(Register(H)),
    XOR(Register(L)),
    XOR(RegisterIndirect(HL)),
    XOR(Register(A)),

    // Bx
    OR(Register(B)),
    OR(Register(C)),
    OR(Register(D)),
    OR(Register(E)),
    OR(Register(H)),
    OR(Register(L)),
    OR(RegisterIndirect(HL)),
    OR(Register(A)),
    CP(Register(B)),
    CP(Register(C)),
    CP(Register(D)),
    CP(Register(E)),
    CP(Register(H)),
    CP(Register(L)),
    CP(RegisterIndirect(HL)),
    CP(Register(A)),

    // Cx
    RET(NoZero),
    POP(RegisterPair(BC)),
    JP(NoZero),
    JP,
    CALL(NoZero),
    PUSH(RegisterPair(BC)),
    ADD(Register(A), Immediate),
    RST(0),
    RET(Zero),
    RET(True),
    JP(Zero),
    Bit,
    CALL(Zero),
    CALL(True),
    ADC(Register(A), Immediate),
    RST(8),

    // Dx
    RET(NoCarry),
    POP(RegisterPair(DE)),
    JP(NoCarry),
    OUT(Immediate, Register(A)),
    CALL(NoCarry),
    PUSH(RegisterPair(DE)),
    SUB(Immediate),
    RST(16),
    RET(Carry),
    EXX,
    JP(Carry),
    IN(Register(A), Immediate),
    CALL(Carry),
    Ix,
    SBC(Register(A), Immediate),
    RST(24),

    // Ex
    RET(NoParityOverflow),
    POP(RegisterPair(HL)),
    JP(NoParityOverflow),
    EX(RegisterPair(SP), RegisterPair(HL)),
    CALL(NoParityOverflow),
    PUSH(RegisterPair(HL)),
    AND(Immediate),
    RST(32),
    RET(ParityOverflow),
    JP_HL,
    JP(ParityOverflow),
    EX(RegisterPair(DE), RegisterPair(HL)),
    CALL(ParityOverflow),
    Misc,
    XOR(Immediate),
    RST(40),

    // Fx
    RET(NoSign),
    POP(RegisterPair(AF)),
    JP(NoSign),
    DI,
    CALL(NoSign),
    PUSH(RegisterPair(AF)),
    OR(Immediate),
    RST(48),
    RET(Sign),
    LD(RegisterPair(SP), RegisterPair(HL)),
    JP(Sign),
    EI,
    CALL(Sign),
    Iy,
    CP(Immediate),
    RST(56),
];

pub const BIT_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    RLC(Register(B), Register(B)),
    RLC(Register(C), Register(C)),
    RLC(Register(D), Register(D)),
    RLC(Register(E), Register(E)),
    RLC(Register(H), Register(H)),
    RLC(Register(L), Register(L)),
    RLC(RegisterIndirect(HL), RegisterIndirect(HL)),
    RLC(Register(A), Register(A)),
    RRC(Register(B), Register(B)),
    RRC(Register(C), Register(C)),
    RRC(Register(D), Register(D)),
    RRC(Register(E), Register(E)),
    RRC(Register(H), Register(H)),
    RRC(Register(L), Register(L)),
    RRC(RegisterIndirect(HL), RegisterIndirect(HL)),
    RRC(Register(A), Register(A)),

    // 1x
    RL(Register(B), Register(B)),
    RL(Register(C), Register(C)),
    RL(Register(D), Register(D)),
    RL(Register(E), Register(E)),
    RL(Register(H), Register(H)),
    RL(Register(L), Register(L)),
    RL(RegisterIndirect(HL), RegisterIndirect(HL)),
    RL(Register(A), Register(A)),
    RR(Register(B), Register(B)),
    RR(Register(C), Register(C)),
    RR(Register(D), Register(D)),
    RR(Register(E), Register(E)),
    RR(Register(H), Register(H)),
    RR(Register(L), Register(L)),
    RR(RegisterIndirect(HL), RegisterIndirect(HL)),
    RR(Register(A), Register(A)),

    // 2x
    SLA(Register(B), Register(B)),
    SLA(Register(C), Register(C)),
    SLA(Register(D), Register(D)),
    SLA(Register(E), Register(E)),
    SLA(Register(H), Register(H)),
    SLA(Register(L), Register(L)),
    SLA(RegisterIndirect(HL), RegisterIndirect(HL)),
    SLA(Register(A), Register(A)),
    SRA(Register(B), Register(B)),
    SRA(Register(C), Register(C)),
    SRA(Register(D), Register(D)),
    SRA(Register(E), Register(E)),
    SRA(Register(H), Register(H)),
    SRA(Register(L), Register(L)),
    SRA(RegisterIndirect(HL), RegisterIndirect(HL)),
    SRA(Register(A), Register(A)),

    // 3x
    SLL(Register(B), Register(B)),
    SLL(Register(C), Register(C)),
    SLL(Register(D), Register(D)),
    SLL(Register(E), Register(E)),
    SLL(Register(H), Register(H)),
    SLL(Register(L), Register(L)),
    SLL(RegisterIndirect(HL), RegisterIndirect(HL)),
    SLL(Register(A), Register(A)),
    SRL(Register(B), Register(B)),
    SRL(Register(C), Register(C)),
    SRL(Register(D), Register(D)),
    SRL(Register(E), Register(E)),
    SRL(Register(H), Register(H)),
    SRL(Register(L), Register(L)),
    SRL(RegisterIndirect(HL), RegisterIndirect(HL)),
    SRL(Register(A), Register(A)),

    // 4x
    BIT(0, Register(B), Register(B)),
    BIT(0, Register(C), Register(C)),
    BIT(0, Register(D), Register(D)),
    BIT(0, Register(E), Register(E)),
    BIT(0, Register(H), Register(H)),
    BIT(0, Register(L), Register(L)),
    BIT(0, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(0, Register(A), Register(A)),
    BIT(1, Register(B), Register(B)),
    BIT(1, Register(C), Register(C)),
    BIT(1, Register(D), Register(D)),
    BIT(1, Register(E), Register(E)),
    BIT(1, Register(H), Register(H)),
    BIT(1, Register(L), Register(L)),
    BIT(1, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(1, Register(A), Register(A)),

    // 5x
    BIT(2, Register(B), Register(B)),
    BIT(2, Register(C), Register(C)),
    BIT(2, Register(D), Register(D)),
    BIT(2, Register(E), Register(E)),
    BIT(2, Register(H), Register(H)),
    BIT(2, Register(L), Register(L)),
    BIT(2, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(2, Register(A), Register(A)),
    BIT(3, Register(B), Register(B)),
    BIT(3, Register(C), Register(C)),
    BIT(3, Register(D), Register(D)),
    BIT(3, Register(E), Register(E)),
    BIT(3, Register(H), Register(H)),
    BIT(3, Register(L), Register(L)),
    BIT(3, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(3, Register(A), Register(A)),

    // 6x
    BIT(4, Register(B), Register(B)),
    BIT(4, Register(C), Register(C)),
    BIT(4, Register(D), Register(D)),
    BIT(4, Register(E), Register(E)),
    BIT(4, Register(H), Register(H)),
    BIT(4, Register(L), Register(L)),
    BIT(4, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(4, Register(A), Register(A)),
    BIT(5, Register(B), Register(B)),
    BIT(5, Register(C), Register(C)),
    BIT(5, Register(D), Register(D)),
    BIT(5, Register(E), Register(E)),
    BIT(5, Register(H), Register(H)),
    BIT(5, Register(L), Register(L)),
    BIT(5, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(5, Register(A), Register(A)),

    // 7x
    BIT(6, Register(B), Register(B)),
    BIT(6, Register(C), Register(C)),
    BIT(6, Register(D), Register(D)),
    BIT(6, Register(E), Register(E)),
    BIT(6, Register(H), Register(H)),
    BIT(6, Register(L), Register(L)),
    BIT(6, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(6, Register(A), Register(A)),
    BIT(7, Register(B), Register(B)),
    BIT(7, Register(C), Register(C)),
    BIT(7, Register(D), Register(D)),
    BIT(7, Register(E), Register(E)),
    BIT(7, Register(H), Register(H)),
    BIT(7, Register(L), Register(L)),
    BIT(7, RegisterIndirect(HL), RegisterIndirect(HL)),
    BIT(7, Register(A), Register(A)),

    // 8x
    RES(0, Register(B), Register(B)),
    RES(0, Register(C), Register(C)),
    RES(0, Register(D), Register(D)),
    RES(0, Register(E), Register(E)),
    RES(0, Register(H), Register(H)),
    RES(0, Register(L), Register(L)),
    RES(0, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(0, Register(A), Register(A)),
    RES(1, Register(B), Register(B)),
    RES(1, Register(C), Register(C)),
    RES(1, Register(D), Register(D)),
    RES(1, Register(E), Register(E)),
    RES(1, Register(H), Register(H)),
    RES(1, Register(L), Register(L)),
    RES(1, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(1, Register(A), Register(A)),

    // 9x
    RES(2, Register(B), Register(B)),
    RES(2, Register(C), Register(C)),
    RES(2, Register(D), Register(D)),
    RES(2, Register(E), Register(E)),
    RES(2, Register(H), Register(H)),
    RES(2, Register(L), Register(L)),
    RES(2, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(2, Register(A), Register(A)),
    RES(3, Register(B), Register(B)),
    RES(3, Register(C), Register(C)),
    RES(3, Register(D), Register(D)),
    RES(3, Register(E), Register(E)),
    RES(3, Register(H), Register(H)),
    RES(3, Register(L), Register(L)),
    RES(3, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(3, Register(A), Register(A)),

    // Ax
    RES(4, Register(B), Register(B)),
    RES(4, Register(C), Register(C)),
    RES(4, Register(D), Register(D)),
    RES(4, Register(E), Register(E)),
    RES(4, Register(H), Register(H)),
    RES(4, Register(L), Register(L)),
    RES(4, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(4, Register(A), Register(A)),
    RES(5, Register(B), Register(B)),
    RES(5, Register(C), Register(C)),
    RES(5, Register(D), Register(D)),
    RES(5, Register(E), Register(E)),
    RES(5, Register(H), Register(H)),
    RES(5, Register(L), Register(L)),
    RES(5, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(5, Register(A), Register(A)),

    // Bx
    RES(6, Register(B), Register(B)),
    RES(6, Register(C), Register(C)),
    RES(6, Register(D), Register(D)),
    RES(6, Register(E), Register(E)),
    RES(6, Register(H), Register(H)),
    RES(6, Register(L), Register(L)),
    RES(6, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(6, Register(A), Register(A)),
    RES(7, Register(B), Register(B)),
    RES(7, Register(C), Register(C)),
    RES(7, Register(D), Register(D)),
    RES(7, Register(E), Register(E)),
    RES(7, Register(H), Register(H)),
    RES(7, Register(L), Register(L)),
    RES(7, RegisterIndirect(HL), RegisterIndirect(HL)),
    RES(7, Register(A), Register(A)),

    // Cx
    SET(0, Register(B), Register(B)),
    SET(0, Register(C), Register(C)),
    SET(0, Register(D), Register(D)),
    SET(0, Register(E), Register(E)),
    SET(0, Register(H), Register(H)),
    SET(0, Register(L), Register(L)),
    SET(0, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(0, Register(A), Register(A)),
    SET(1, Register(B), Register(B)),
    SET(1, Register(C), Register(C)),
    SET(1, Register(D), Register(D)),
    SET(1, Register(E), Register(E)),
    SET(1, Register(H), Register(H)),
    SET(1, Register(L), Register(L)),
    SET(1, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(1, Register(A), Register(A)),

    // Dx
    SET(2, Register(B), Register(B)),
    SET(2, Register(C), Register(C)),
    SET(2, Register(D), Register(D)),
    SET(2, Register(E), Register(E)),
    SET(2, Register(H), Register(H)),
    SET(2, Register(L), Register(L)),
    SET(2, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(2, Register(A), Register(A)),
    SET(3, Register(B), Register(B)),
    SET(3, Register(C), Register(C)),
    SET(3, Register(D), Register(D)),
    SET(3, Register(E), Register(E)),
    SET(3, Register(H), Register(H)),
    SET(3, Register(L), Register(L)),
    SET(3, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(3, Register(A), Register(A)),

    // Ex
    SET(4, Register(B), Register(B)),
    SET(4, Register(C), Register(C)),
    SET(4, Register(D), Register(D)),
    SET(4, Register(E), Register(E)),
    SET(4, Register(H), Register(H)),
    SET(4, Register(L), Register(L)),
    SET(4, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(4, Register(A), Register(A)),
    SET(5, Register(B), Register(B)),
    SET(5, Register(C), Register(C)),
    SET(5, Register(D), Register(D)),
    SET(5, Register(E), Register(E)),
    SET(5, Register(H), Register(H)),
    SET(5, Register(L), Register(L)),
    SET(5, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(5, Register(A), Register(A)),

    // Fx
    SET(6, Register(B), Register(B)),
    SET(6, Register(C), Register(C)),
    SET(6, Register(D), Register(D)),
    SET(6, Register(E), Register(E)),
    SET(6, Register(H), Register(H)),
    SET(6, Register(L), Register(L)),
    SET(6, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(6, Register(A), Register(A)),
    SET(7, Register(B), Register(B)),
    SET(7, Register(C), Register(C)),
    SET(7, Register(D), Register(D)),
    SET(7, Register(E), Register(E)),
    SET(7, Register(H), Register(H)),
    SET(7, Register(L), Register(L)),
    SET(7, RegisterIndirect(HL), RegisterIndirect(HL)),
    SET(7, Register(A), Register(A)),
];

pub const IX_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Register(B)),
    DEC(Register(B)),
    LD(Register(B), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IXP), RegisterPair(BC)),
    NOP,
    NOP,
    INC(Register(C)),
    DEC(Register(C)),
    LD(Register(C), Immediate),
    NOP,

    // 1x
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Register(D)),
    DEC(Register(D)),
    LD(Register(D), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IXP), RegisterPair(DE)),
    NOP,
    NOP,
    INC(Register(E)),
    DEC(Register(E)),
    LD(Register(E), Immediate),
    NOP,

    // 2x
    NOP,
    LD(RegisterPair(IXP), Immediate),
    LD(Extended, RegisterPair(IXP)),
    INC(RegisterPair(IXP)),
    INC(Register(IXH)),
    DEC(Register(IXH)),
    LD(Register(IXH), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IXP), RegisterPair(IXP)),
    LD(RegisterPair(IXP), Extended),
    DEC(RegisterPair(IXP)),
    INC(Register(IXL)),
    DEC(Register(IXL)),
    LD(Register(IXL), Immediate),
    NOP,

    // 3x,
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Indexed(IX)),
    DEC(Indexed(IX)),
    LD(Indexed(IX), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IXP), RegisterPair(SP)),
    NOP,
    NOP,
    INC(Register(A)),
    DEC(Register(A)),
    LD(Register(A), Immediate),
    NOP,

    // 4x,
    LD(Register(B), Register(B)),
    LD(Register(B), Register(C)),
    LD(Register(B), Register(D)),
    LD(Register(B), Register(E)),
    LD(Register(B), Register(IXH)),
    LD(Register(B), Register(IXL)),
    LD(Register(B), Indexed(IX)),
    LD(Register(B), Register(A)),
    LD(Register(C), Register(B)),
    LD(Register(C), Register(C)),
    LD(Register(C), Register(D)),
    LD(Register(C), Register(E)),
    LD(Register(C), Register(IXH)),
    LD(Register(C), Register(IXL)),
    LD(Register(C), Indexed(IX)),
    LD(Register(C), Register(A)),

    // 5x,
    LD(Register(D), Register(B)),
    LD(Register(D), Register(C)),
    LD(Register(D), Register(D)),
    LD(Register(D), Register(E)),
    LD(Register(D), Register(IXH)),
    LD(Register(D), Register(IXL)),
    LD(Register(D), Indexed(IX)),
    LD(Register(D), Register(A)),
    LD(Register(E), Register(B)),
    LD(Register(E), Register(C)),
    LD(Register(E), Register(D)),
    LD(Register(E), Register(E)),
    LD(Register(E), Register(IXH)),
    LD(Register(E), Register(IXL)),
    LD(Register(E), Indexed(IX)),
    LD(Register(E), Register(A)),

    // 6x,
    LD(Register(H), Register(B)),
    LD(Register(H), Register(C)),
    LD(Register(H), Register(D)),
    LD(Register(H), Register(E)),
    LD(Register(H), Register(IXH)),
    LD(Register(H), Register(IXL)),
    LD(Register(H), Indexed(IX)),
    LD(Register(H), Register(A)),
    LD(Register(L), Register(B)),
    LD(Register(L), Register(C)),
    LD(Register(L), Register(D)),
    LD(Register(L), Register(E)),
    LD(Register(L), Register(IXH)),
    LD(Register(L), Register(IXL)),
    LD(Register(L), Indexed(IX)),
    LD(Register(L), Register(A)),

    // 7x
    LD(Indexed(IX), Register(B)),
    LD(Indexed(IX), Register(C)),
    LD(Indexed(IX), Register(D)),
    LD(Indexed(IX), Register(E)),
    LD(Indexed(IX), Register(H)),
    LD(Indexed(IX), Register(L)),
    NOP,
    LD(Indexed(IX), Register(A)),
    LD(Register(A), Register(B)),
    LD(Register(A), Register(C)),
    LD(Register(A), Register(D)),
    LD(Register(A), Register(E)),
    LD(Register(A), Register(IXH)),
    LD(Register(A), Register(IXL)),
    LD(Register(A), Indexed(IX)),
    LD(Register(A), Register(A)),

    // 8x
    ADD(Register(A), Register(B)),
    ADD(Register(A), Register(C)),
    ADD(Register(A), Register(D)),
    ADD(Register(A), Register(E)),
    ADD(Register(A), Register(IXH)),
    ADD(Register(A), Register(IXL)),
    ADD(Register(A), Indexed(IX)),
    ADD(Register(A), Register(A)),
    ADC(Register(A), Register(B)),
    ADC(Register(A), Register(C)),
    ADC(Register(A), Register(D)),
    ADC(Register(A), Register(E)),
    ADC(Register(A), Register(IXH)),
    ADC(Register(A), Register(IXL)),
    ADC(Register(A), Indexed(IX)),
    ADC(Register(A), Register(A)),

    // 9x
    SUB(Register(B)),
    SUB(Register(C)),
    SUB(Register(D)),
    SUB(Register(E)),
    SUB(Register(IXH)),
    SUB(Register(IXL)),
    SUB(Indexed(IX)),
    SUB(Register(A)),
    SBC(Register(A), Register(B)),
    SBC(Register(A), Register(C)),
    SBC(Register(A), Register(D)),
    SBC(Register(A), Register(E)),
    SBC(Register(A), Register(IXH)),
    SBC(Register(A), Register(IXL)),
    SBC(Register(A), Indexed(IX)),
    SBC(Register(A), Register(A)),

    // Ax
    AND(Register(B)),
    AND(Register(C)),
    AND(Register(D)),
    AND(Register(E)),
    AND(Register(IXH)),
    AND(Register(IXL)),
    AND(Indexed(IX)),
    AND(Register(A)),
    XOR(Register(B)),
    XOR(Register(C)),
    XOR(Register(D)),
    XOR(Register(E)),
    XOR(Register(IXH)),
    XOR(Register(IXL)),
    XOR(Indexed(IX)),
    XOR(Register(A)),

    // Bx
    OR(Register(B)),
    OR(Register(C)),
    OR(Register(D)),
    OR(Register(E)),
    OR(Register(IXH)),
    OR(Register(IXL)),
    OR(Indexed(IX)),
    OR(Register(A)),
    CP(Register(B)),
    CP(Register(C)),
    CP(Register(D)),
    CP(Register(E)),
    CP(Register(IXH)),
    CP(Register(IXL)),
    CP(Indexed(IX)),
    CP(Register(A)),

    // Cx
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    IxBit,
    NOP,
    NOP,
    NOP,
    NOP,

    // Dx,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Ex
    NOP,
    POP(RegisterPair(IXP)),
    NOP,
    EX(RegisterIndirect(SP), RegisterPair(IXP)),
    NOP,
    PUSH(RegisterPair(IXP)),
    NOP,
    NOP,
    NOP,
    JP_Addr(Indexed(IX)),
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Fx,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    LD(RegisterPair(SP), RegisterPair(IXP)),
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
];

pub const IX_BIT_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    RLC(Indexed(IX), Register(B)),
    RLC(Indexed(IX), Register(C)),
    RLC(Indexed(IX), Register(D)),
    RLC(Indexed(IX), Register(E)),
    RLC(Indexed(IX), Register(H)),
    RLC(Indexed(IX), Register(L)),
    RLC(Indexed(IX), Indexed(IX)),
    RLC(Indexed(IX), Register(A)),
    RRC(Indexed(IX), Register(B)),
    RRC(Indexed(IX), Register(C)),
    RRC(Indexed(IX), Register(D)),
    RRC(Indexed(IX), Register(E)),
    RRC(Indexed(IX), Register(H)),
    RRC(Indexed(IX), Register(L)),
    RRC(Indexed(IX), Indexed(IX)),
    RRC(Indexed(IX), Register(A)),

    // 1x
    RL(Indexed(IX), Register(B)),
    RL(Indexed(IX), Register(C)),
    RL(Indexed(IX), Register(D)),
    RL(Indexed(IX), Register(E)),
    RL(Indexed(IX), Register(H)),
    RL(Indexed(IX), Register(L)),
    RL(Indexed(IX), Indexed(IX)),
    RL(Indexed(IX), Register(A)),
    RR(Indexed(IX), Register(B)),
    RR(Indexed(IX), Register(C)),
    RR(Indexed(IX), Register(D)),
    RR(Indexed(IX), Register(E)),
    RR(Indexed(IX), Register(H)),
    RR(Indexed(IX), Register(L)),
    RR(Indexed(IX), Indexed(IX)),
    RR(Indexed(IX), Register(A)),

    // 2x
    SLA(Indexed(IX), Register(B)),
    SLA(Indexed(IX), Register(C)),
    SLA(Indexed(IX), Register(D)),
    SLA(Indexed(IX), Register(E)),
    SLA(Indexed(IX), Register(H)),
    SLA(Indexed(IX), Register(L)),
    SLA(Indexed(IX), Indexed(IX)),
    SLA(Indexed(IX), Register(A)),
    SRA(Indexed(IX), Register(B)),
    SRA(Indexed(IX), Register(C)),
    SRA(Indexed(IX), Register(D)),
    SRA(Indexed(IX), Register(E)),
    SRA(Indexed(IX), Register(H)),
    SRA(Indexed(IX), Register(L)),
    SRA(Indexed(IX), Indexed(IX)),
    SRA(Indexed(IX), Register(A)),

    // 3x
    SLL(Indexed(IX), Register(B)),
    SLL(Indexed(IX), Register(C)),
    SLL(Indexed(IX), Register(D)),
    SLL(Indexed(IX), Register(E)),
    SLL(Indexed(IX), Register(H)),
    SLL(Indexed(IX), Register(L)),
    SLL(Indexed(IX), Indexed(IX)),
    SLL(Indexed(IX), Register(A)),
    SRL(Indexed(IX), Register(B)),
    SRL(Indexed(IX), Register(C)),
    SRL(Indexed(IX), Register(D)),
    SRL(Indexed(IX), Register(E)),
    SRL(Indexed(IX), Register(H)),
    SRL(Indexed(IX), Register(L)),
    SRL(Indexed(IX), Indexed(IX)),
    SRL(Indexed(IX), Register(A)),

    // 4x
    BIT(0, Indexed(IX), Register(B)),
    BIT(0, Indexed(IX), Register(C)),
    BIT(0, Indexed(IX), Register(D)),
    BIT(0, Indexed(IX), Register(E)),
    BIT(0, Indexed(IX), Register(H)),
    BIT(0, Indexed(IX), Register(L)),
    BIT(0, Indexed(IX), Indexed(IX)),
    BIT(0, Indexed(IX), Register(A)),
    BIT(1, Indexed(IX), Register(B)),
    BIT(1, Indexed(IX), Register(C)),
    BIT(1, Indexed(IX), Register(D)),
    BIT(1, Indexed(IX), Register(E)),
    BIT(1, Indexed(IX), Register(H)),
    BIT(1, Indexed(IX), Register(L)),
    BIT(1, Indexed(IX), Indexed(IX)),
    BIT(1, Indexed(IX), Register(A)),

    // 5x
    BIT(2, Indexed(IX), Register(B)),
    BIT(2, Indexed(IX), Register(C)),
    BIT(2, Indexed(IX), Register(D)),
    BIT(2, Indexed(IX), Register(E)),
    BIT(2, Indexed(IX), Register(H)),
    BIT(2, Indexed(IX), Register(L)),
    BIT(2, Indexed(IX), Indexed(IX)),
    BIT(2, Indexed(IX), Register(A)),
    BIT(3, Indexed(IX), Register(B)),
    BIT(3, Indexed(IX), Register(C)),
    BIT(3, Indexed(IX), Register(D)),
    BIT(3, Indexed(IX), Register(E)),
    BIT(3, Indexed(IX), Register(H)),
    BIT(3, Indexed(IX), Register(L)),
    BIT(3, Indexed(IX), Indexed(IX)),
    BIT(3, Indexed(IX), Register(A)),

    // 6x
    BIT(4, Indexed(IX), Register(B)),
    BIT(4, Indexed(IX), Register(C)),
    BIT(4, Indexed(IX), Register(D)),
    BIT(4, Indexed(IX), Register(E)),
    BIT(4, Indexed(IX), Register(H)),
    BIT(4, Indexed(IX), Register(L)),
    BIT(4, Indexed(IX), Indexed(IX)),
    BIT(4, Indexed(IX), Register(A)),
    BIT(5, Indexed(IX), Register(B)),
    BIT(5, Indexed(IX), Register(C)),
    BIT(5, Indexed(IX), Register(D)),
    BIT(5, Indexed(IX), Register(E)),
    BIT(5, Indexed(IX), Register(H)),
    BIT(5, Indexed(IX), Register(L)),
    BIT(5, Indexed(IX), Indexed(IX)),
    BIT(5, Indexed(IX), Register(A)),

    // 7x
    BIT(6, Indexed(IX), Register(B)),
    BIT(6, Indexed(IX), Register(C)),
    BIT(6, Indexed(IX), Register(D)),
    BIT(6, Indexed(IX), Register(E)),
    BIT(6, Indexed(IX), Register(H)),
    BIT(6, Indexed(IX), Register(L)),
    BIT(6, Indexed(IX), Indexed(IX)),
    BIT(6, Indexed(IX), Register(A)),
    BIT(7, Indexed(IX), Register(B)),
    BIT(7, Indexed(IX), Register(C)),
    BIT(7, Indexed(IX), Register(D)),
    BIT(7, Indexed(IX), Register(E)),
    BIT(7, Indexed(IX), Register(H)),
    BIT(7, Indexed(IX), Register(L)),
    BIT(7, Indexed(IX), Indexed(IX)),
    BIT(7, Indexed(IX), Register(A)),

    // 8x
    RES(0, Indexed(IX), Register(B)),
    RES(0, Indexed(IX), Register(C)),
    RES(0, Indexed(IX), Register(D)),
    RES(0, Indexed(IX), Register(E)),
    RES(0, Indexed(IX), Register(H)),
    RES(0, Indexed(IX), Register(L)),
    RES(0, Indexed(IX), Indexed(IX)),
    RES(0, Indexed(IX), Register(A)),
    RES(1, Indexed(IX), Register(B)),
    RES(1, Indexed(IX), Register(C)),
    RES(1, Indexed(IX), Register(D)),
    RES(1, Indexed(IX), Register(E)),
    RES(1, Indexed(IX), Register(H)),
    RES(1, Indexed(IX), Register(L)),
    RES(1, Indexed(IX), Indexed(IX)),
    RES(1, Indexed(IX), Register(A)),

    // 9x
    RES(2, Indexed(IX), Register(B)),
    RES(2, Indexed(IX), Register(C)),
    RES(2, Indexed(IX), Register(D)),
    RES(2, Indexed(IX), Register(E)),
    RES(2, Indexed(IX), Register(H)),
    RES(2, Indexed(IX), Register(L)),
    RES(2, Indexed(IX), Indexed(IX)),
    RES(2, Indexed(IX), Register(A)),
    RES(3, Indexed(IX), Register(B)),
    RES(3, Indexed(IX), Register(C)),
    RES(3, Indexed(IX), Register(D)),
    RES(3, Indexed(IX), Register(E)),
    RES(3, Indexed(IX), Register(H)),
    RES(3, Indexed(IX), Register(L)),
    RES(3, Indexed(IX), Indexed(IX)),
    RES(3, Indexed(IX), Register(A)),

    // Ax
    RES(4, Indexed(IX), Register(B)),
    RES(4, Indexed(IX), Register(C)),
    RES(4, Indexed(IX), Register(D)),
    RES(4, Indexed(IX), Register(E)),
    RES(4, Indexed(IX), Register(H)),
    RES(4, Indexed(IX), Register(L)),
    RES(4, Indexed(IX), Indexed(IX)),
    RES(4, Indexed(IX), Register(A)),
    RES(5, Indexed(IX), Register(B)),
    RES(5, Indexed(IX), Register(C)),
    RES(5, Indexed(IX), Register(D)),
    RES(5, Indexed(IX), Register(E)),
    RES(5, Indexed(IX), Register(H)),
    RES(5, Indexed(IX), Register(L)),
    RES(5, Indexed(IX), Indexed(IX)),
    RES(5, Indexed(IX), Register(A)),

    // Bx
    RES(6, Indexed(IX), Register(B)),
    RES(6, Indexed(IX), Register(C)),
    RES(6, Indexed(IX), Register(D)),
    RES(6, Indexed(IX), Register(E)),
    RES(6, Indexed(IX), Register(H)),
    RES(6, Indexed(IX), Register(L)),
    RES(6, Indexed(IX), Indexed(IX)),
    RES(6, Indexed(IX), Register(A)),
    RES(7, Indexed(IX), Register(B)),
    RES(7, Indexed(IX), Register(C)),
    RES(7, Indexed(IX), Register(D)),
    RES(7, Indexed(IX), Register(E)),
    RES(7, Indexed(IX), Register(H)),
    RES(7, Indexed(IX), Register(L)),
    RES(7, Indexed(IX), Indexed(IX)),
    RES(7, Indexed(IX), Register(A)),

    // Cx
    SET(0, Indexed(IX), Register(B)),
    SET(0, Indexed(IX), Register(C)),
    SET(0, Indexed(IX), Register(D)),
    SET(0, Indexed(IX), Register(E)),
    SET(0, Indexed(IX), Register(H)),
    SET(0, Indexed(IX), Register(L)),
    SET(0, Indexed(IX), Indexed(IX)),
    SET(0, Indexed(IX), Register(A)),
    SET(1, Indexed(IX), Register(B)),
    SET(1, Indexed(IX), Register(C)),
    SET(1, Indexed(IX), Register(D)),
    SET(1, Indexed(IX), Register(E)),
    SET(1, Indexed(IX), Register(H)),
    SET(1, Indexed(IX), Register(L)),
    SET(1, Indexed(IX), Indexed(IX)),
    SET(1, Indexed(IX), Register(A)),

    // Dx
    SET(2, Indexed(IX), Register(B)),
    SET(2, Indexed(IX), Register(C)),
    SET(2, Indexed(IX), Register(D)),
    SET(2, Indexed(IX), Register(E)),
    SET(2, Indexed(IX), Register(H)),
    SET(2, Indexed(IX), Register(L)),
    SET(2, Indexed(IX), Indexed(IX)),
    SET(2, Indexed(IX), Register(A)),
    SET(3, Indexed(IX), Register(B)),
    SET(3, Indexed(IX), Register(C)),
    SET(3, Indexed(IX), Register(D)),
    SET(3, Indexed(IX), Register(E)),
    SET(3, Indexed(IX), Register(H)),
    SET(3, Indexed(IX), Register(L)),
    SET(3, Indexed(IX), Indexed(IX)),
    SET(3, Indexed(IX), Register(A)),

    // Ex
    SET(4, Indexed(IX), Register(B)),
    SET(4, Indexed(IX), Register(C)),
    SET(4, Indexed(IX), Register(D)),
    SET(4, Indexed(IX), Register(E)),
    SET(4, Indexed(IX), Register(H)),
    SET(4, Indexed(IX), Register(L)),
    SET(4, Indexed(IX), Indexed(IX)),
    SET(4, Indexed(IX), Register(A)),
    SET(5, Indexed(IX), Register(B)),
    SET(5, Indexed(IX), Register(C)),
    SET(5, Indexed(IX), Register(D)),
    SET(5, Indexed(IX), Register(E)),
    SET(5, Indexed(IX), Register(H)),
    SET(5, Indexed(IX), Register(L)),
    SET(5, Indexed(IX), Indexed(IX)),
    SET(5, Indexed(IX), Register(A)),

    // Fx
    SET(6, Indexed(IX), Register(B)),
    SET(6, Indexed(IX), Register(C)),
    SET(6, Indexed(IX), Register(D)),
    SET(6, Indexed(IX), Register(E)),
    SET(6, Indexed(IX), Register(H)),
    SET(6, Indexed(IX), Register(L)),
    SET(6, Indexed(IX), Indexed(IX)),
    SET(6, Indexed(IX), Register(A)),
    SET(7, Indexed(IX), Register(B)),
    SET(7, Indexed(IX), Register(C)),
    SET(7, Indexed(IX), Register(D)),
    SET(7, Indexed(IX), Register(E)),
    SET(7, Indexed(IX), Register(H)),
    SET(7, Indexed(IX), Register(L)),
    SET(7, Indexed(IX), Indexed(IX)),
    SET(7, Indexed(IX), Register(A)),
];

pub const IY_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Register(B)),
    DEC(Register(B)),
    LD(Register(B), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IYP), RegisterPair(BC)),
    NOP,
    NOP,
    INC(Register(C)),
    DEC(Register(C)),
    LD(Register(C), Immediate),
    NOP,

    // 1x
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Register(D)),
    DEC(Register(D)),
    LD(Register(D), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IYP), RegisterPair(DE)),
    NOP,
    NOP,
    INC(Register(E)),
    DEC(Register(E)),
    LD(Register(E), Immediate),
    NOP,

    // 2x
    NOP,
    LD(RegisterPair(IYP), Immediate),
    LD(Extended, RegisterPair(IYP)),
    INC(RegisterPair(IYP)),
    INC(Register(IYH)),
    DEC(Register(IYH)),
    LD(Register(IYH), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IYP), RegisterPair(IYP)),
    LD(RegisterPair(IYP), Extended),
    DEC(RegisterPair(IYP)),
    INC(Register(IYL)),
    DEC(Register(IYL)),
    LD(Register(IYL), Immediate),
    NOP,

    // 3x,
    NOP,
    NOP,
    NOP,
    NOP,
    INC(Indexed(IY)),
    DEC(Indexed(IY)),
    LD(Indexed(IY), Immediate),
    NOP,
    NOP,
    ADD(RegisterPair(IYP), RegisterPair(SP)),
    NOP,
    NOP,
    INC(Register(A)),
    DEC(Register(A)),
    LD(Register(A), Immediate),
    NOP,

    // 4x,
    LD(Register(B), Register(B)),
    LD(Register(B), Register(C)),
    LD(Register(B), Register(D)),
    LD(Register(B), Register(E)),
    LD(Register(B), Register(IYH)),
    LD(Register(B), Register(IYL)),
    LD(Register(B), Indexed(IY)),
    LD(Register(B), Register(A)),
    LD(Register(C), Register(B)),
    LD(Register(C), Register(C)),
    LD(Register(C), Register(D)),
    LD(Register(C), Register(E)),
    LD(Register(C), Register(IYH)),
    LD(Register(C), Register(IYL)),
    LD(Register(C), Indexed(IY)),
    LD(Register(C), Register(A)),

    // 5x,
    LD(Register(D), Register(B)),
    LD(Register(D), Register(C)),
    LD(Register(D), Register(D)),
    LD(Register(D), Register(E)),
    LD(Register(D), Register(IYH)),
    LD(Register(D), Register(IYL)),
    LD(Register(D), Indexed(IY)),
    LD(Register(D), Register(A)),
    LD(Register(E), Register(B)),
    LD(Register(E), Register(C)),
    LD(Register(E), Register(D)),
    LD(Register(E), Register(E)),
    LD(Register(E), Register(IYH)),
    LD(Register(E), Register(IYL)),
    LD(Register(E), Indexed(IY)),
    LD(Register(E), Register(A)),

    // 6x,
    LD(Register(H), Register(B)),
    LD(Register(H), Register(C)),
    LD(Register(H), Register(D)),
    LD(Register(H), Register(E)),
    LD(Register(H), Register(IYH)),
    LD(Register(H), Register(IYL)),
    LD(Register(H), Indexed(IY)),
    LD(Register(H), Register(A)),
    LD(Register(L), Register(B)),
    LD(Register(L), Register(C)),
    LD(Register(L), Register(D)),
    LD(Register(L), Register(E)),
    LD(Register(L), Register(IYH)),
    LD(Register(L), Register(IYL)),
    LD(Register(L), Indexed(IY)),
    LD(Register(L), Register(A)),

    // 7x
    LD(Indexed(IY), Register(B)),
    LD(Indexed(IY), Register(C)),
    LD(Indexed(IY), Register(D)),
    LD(Indexed(IY), Register(E)),
    LD(Indexed(IY), Register(H)),
    LD(Indexed(IY), Register(L)),
    NOP,
    LD(Indexed(IY), Register(A)),
    LD(Register(A), Register(B)),
    LD(Register(A), Register(C)),
    LD(Register(A), Register(D)),
    LD(Register(A), Register(E)),
    LD(Register(A), Register(IYH)),
    LD(Register(A), Register(IYL)),
    LD(Register(A), Indexed(IY)),
    LD(Register(A), Register(A)),

    // 8x
    ADD(Register(A), Register(B)),
    ADD(Register(A), Register(C)),
    ADD(Register(A), Register(D)),
    ADD(Register(A), Register(E)),
    ADD(Register(A), Register(IYH)),
    ADD(Register(A), Register(IYL)),
    ADD(Register(A), Indexed(IY)),
    ADD(Register(A), Register(A)),
    ADC(Register(A), Register(B)),
    ADC(Register(A), Register(C)),
    ADC(Register(A), Register(D)),
    ADC(Register(A), Register(E)),
    ADC(Register(A), Register(IYH)),
    ADC(Register(A), Register(IYL)),
    ADC(Register(A), Indexed(IY)),
    ADC(Register(A), Register(A)),

    // 9x
    SUB(Register(B)),
    SUB(Register(C)),
    SUB(Register(D)),
    SUB(Register(E)),
    SUB(Register(IYH)),
    SUB(Register(IYL)),
    SUB(Indexed(IY)),
    SUB(Register(A)),
    SBC(Register(A), Register(B)),
    SBC(Register(A), Register(C)),
    SBC(Register(A), Register(D)),
    SBC(Register(A), Register(E)),
    SBC(Register(A), Register(IYH)),
    SBC(Register(A), Register(IYL)),
    SBC(Register(A), Indexed(IY)),
    SBC(Register(A), Register(A)),

    // Ax
    AND(Register(B)),
    AND(Register(C)),
    AND(Register(D)),
    AND(Register(E)),
    AND(Register(IYH)),
    AND(Register(IYL)),
    AND(Indexed(IY)),
    AND(Register(A)),
    XOR(Register(B)),
    XOR(Register(C)),
    XOR(Register(D)),
    XOR(Register(E)),
    XOR(Register(IYH)),
    XOR(Register(IYL)),
    XOR(Indexed(IY)),
    XOR(Register(A)),

    // Bx
    OR(Register(B)),
    OR(Register(C)),
    OR(Register(D)),
    OR(Register(E)),
    OR(Register(IYH)),
    OR(Register(IYL)),
    OR(Indexed(IY)),
    OR(Register(A)),
    CP(Register(B)),
    CP(Register(C)),
    CP(Register(D)),
    CP(Register(E)),
    CP(Register(IYH)),
    CP(Register(IYL)),
    CP(Indexed(IY)),
    CP(Register(A)),

    // Cx
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    IYBit,
    NOP,
    NOP,
    NOP,
    NOP,

    // Dx,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Ex
    NOP,
    POP(RegisterPair(IYP)),
    NOP,
    EX(RegisterIndirect(SP), RegisterPair(IYP)),
    NOP,
    PUSH(RegisterPair(IYP)),
    NOP,
    NOP,
    NOP,
    JP_Addr(Indexed(IY)),
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Fx,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    LD(RegisterPair(SP), RegisterPair(IYP)),
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
];

pub const IY_BIT_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    RLC(Indexed(IY), Register(B)),
    RLC(Indexed(IY), Register(C)),
    RLC(Indexed(IY), Register(D)),
    RLC(Indexed(IY), Register(E)),
    RLC(Indexed(IY), Register(H)),
    RLC(Indexed(IY), Register(L)),
    RLC(Indexed(IY), Indexed(IY)),
    RLC(Indexed(IY), Register(A)),
    RRC(Indexed(IY), Register(B)),
    RRC(Indexed(IY), Register(C)),
    RRC(Indexed(IY), Register(D)),
    RRC(Indexed(IY), Register(E)),
    RRC(Indexed(IY), Register(H)),
    RRC(Indexed(IY), Register(L)),
    RRC(Indexed(IY), Indexed(IY)),
    RRC(Indexed(IY), Register(A)),

    // 1x
    RL(Indexed(IY), Register(B)),
    RL(Indexed(IY), Register(C)),
    RL(Indexed(IY), Register(D)),
    RL(Indexed(IY), Register(E)),
    RL(Indexed(IY), Register(H)),
    RL(Indexed(IY), Register(L)),
    RL(Indexed(IY), Indexed(IY)),
    RL(Indexed(IY), Register(A)),
    RR(Indexed(IY), Register(B)),
    RR(Indexed(IY), Register(C)),
    RR(Indexed(IY), Register(D)),
    RR(Indexed(IY), Register(E)),
    RR(Indexed(IY), Register(H)),
    RR(Indexed(IY), Register(L)),
    RR(Indexed(IY), Indexed(IY)),
    RR(Indexed(IY), Register(A)),

    // 2x
    SLA(Indexed(IY), Register(B)),
    SLA(Indexed(IY), Register(C)),
    SLA(Indexed(IY), Register(D)),
    SLA(Indexed(IY), Register(E)),
    SLA(Indexed(IY), Register(H)),
    SLA(Indexed(IY), Register(L)),
    SLA(Indexed(IY), Indexed(IY)),
    SLA(Indexed(IY), Register(A)),
    SRA(Indexed(IY), Register(B)),
    SRA(Indexed(IY), Register(C)),
    SRA(Indexed(IY), Register(D)),
    SRA(Indexed(IY), Register(E)),
    SRA(Indexed(IY), Register(H)),
    SRA(Indexed(IY), Register(L)),
    SRA(Indexed(IY), Indexed(IY)),
    SRA(Indexed(IY), Register(A)),

    // 3x
    SLL(Indexed(IY), Register(B)),
    SLL(Indexed(IY), Register(C)),
    SLL(Indexed(IY), Register(D)),
    SLL(Indexed(IY), Register(E)),
    SLL(Indexed(IY), Register(H)),
    SLL(Indexed(IY), Register(L)),
    SLL(Indexed(IY), Indexed(IY)),
    SLL(Indexed(IY), Register(A)),
    SRL(Indexed(IY), Register(B)),
    SRL(Indexed(IY), Register(C)),
    SRL(Indexed(IY), Register(D)),
    SRL(Indexed(IY), Register(E)),
    SRL(Indexed(IY), Register(H)),
    SRL(Indexed(IY), Register(L)),
    SRL(Indexed(IY), Indexed(IY)),
    SRL(Indexed(IY), Register(A)),

    // 4x
    BIT(0, Indexed(IY), Register(B)),
    BIT(0, Indexed(IY), Register(C)),
    BIT(0, Indexed(IY), Register(D)),
    BIT(0, Indexed(IY), Register(E)),
    BIT(0, Indexed(IY), Register(H)),
    BIT(0, Indexed(IY), Register(L)),
    BIT(0, Indexed(IY), Indexed(IY)),
    BIT(0, Indexed(IY), Register(A)),
    BIT(1, Indexed(IY), Register(B)),
    BIT(1, Indexed(IY), Register(C)),
    BIT(1, Indexed(IY), Register(D)),
    BIT(1, Indexed(IY), Register(E)),
    BIT(1, Indexed(IY), Register(H)),
    BIT(1, Indexed(IY), Register(L)),
    BIT(1, Indexed(IY), Indexed(IY)),
    BIT(1, Indexed(IY), Register(A)),

    // 5x
    BIT(2, Indexed(IY), Register(B)),
    BIT(2, Indexed(IY), Register(C)),
    BIT(2, Indexed(IY), Register(D)),
    BIT(2, Indexed(IY), Register(E)),
    BIT(2, Indexed(IY), Register(H)),
    BIT(2, Indexed(IY), Register(L)),
    BIT(2, Indexed(IY), Indexed(IY)),
    BIT(2, Indexed(IY), Register(A)),
    BIT(3, Indexed(IY), Register(B)),
    BIT(3, Indexed(IY), Register(C)),
    BIT(3, Indexed(IY), Register(D)),
    BIT(3, Indexed(IY), Register(E)),
    BIT(3, Indexed(IY), Register(H)),
    BIT(3, Indexed(IY), Register(L)),
    BIT(3, Indexed(IY), Indexed(IY)),
    BIT(3, Indexed(IY), Register(A)),

    // 6x
    BIT(4, Indexed(IY), Register(B)),
    BIT(4, Indexed(IY), Register(C)),
    BIT(4, Indexed(IY), Register(D)),
    BIT(4, Indexed(IY), Register(E)),
    BIT(4, Indexed(IY), Register(H)),
    BIT(4, Indexed(IY), Register(L)),
    BIT(4, Indexed(IY), Indexed(IY)),
    BIT(4, Indexed(IY), Register(A)),
    BIT(5, Indexed(IY), Register(B)),
    BIT(5, Indexed(IY), Register(C)),
    BIT(5, Indexed(IY), Register(D)),
    BIT(5, Indexed(IY), Register(E)),
    BIT(5, Indexed(IY), Register(H)),
    BIT(5, Indexed(IY), Register(L)),
    BIT(5, Indexed(IY), Indexed(IY)),
    BIT(5, Indexed(IY), Register(A)),

    // 7x
    BIT(6, Indexed(IY), Register(B)),
    BIT(6, Indexed(IY), Register(C)),
    BIT(6, Indexed(IY), Register(D)),
    BIT(6, Indexed(IY), Register(E)),
    BIT(6, Indexed(IY), Register(H)),
    BIT(6, Indexed(IY), Register(L)),
    BIT(6, Indexed(IY), Indexed(IY)),
    BIT(6, Indexed(IY), Register(A)),
    BIT(7, Indexed(IY), Register(B)),
    BIT(7, Indexed(IY), Register(C)),
    BIT(7, Indexed(IY), Register(D)),
    BIT(7, Indexed(IY), Register(E)),
    BIT(7, Indexed(IY), Register(H)),
    BIT(7, Indexed(IY), Register(L)),
    BIT(7, Indexed(IY), Indexed(IY)),
    BIT(7, Indexed(IY), Register(A)),

    // 8x
    RES(0, Indexed(IY), Register(B)),
    RES(0, Indexed(IY), Register(C)),
    RES(0, Indexed(IY), Register(D)),
    RES(0, Indexed(IY), Register(E)),
    RES(0, Indexed(IY), Register(H)),
    RES(0, Indexed(IY), Register(L)),
    RES(0, Indexed(IY), Indexed(IY)),
    RES(0, Indexed(IY), Register(A)),
    RES(1, Indexed(IY), Register(B)),
    RES(1, Indexed(IY), Register(C)),
    RES(1, Indexed(IY), Register(D)),
    RES(1, Indexed(IY), Register(E)),
    RES(1, Indexed(IY), Register(H)),
    RES(1, Indexed(IY), Register(L)),
    RES(1, Indexed(IY), Indexed(IY)),
    RES(1, Indexed(IY), Register(A)),

    // 9x
    RES(2, Indexed(IY), Register(B)),
    RES(2, Indexed(IY), Register(C)),
    RES(2, Indexed(IY), Register(D)),
    RES(2, Indexed(IY), Register(E)),
    RES(2, Indexed(IY), Register(H)),
    RES(2, Indexed(IY), Register(L)),
    RES(2, Indexed(IY), Indexed(IY)),
    RES(2, Indexed(IY), Register(A)),
    RES(3, Indexed(IY), Register(B)),
    RES(3, Indexed(IY), Register(C)),
    RES(3, Indexed(IY), Register(D)),
    RES(3, Indexed(IY), Register(E)),
    RES(3, Indexed(IY), Register(H)),
    RES(3, Indexed(IY), Register(L)),
    RES(3, Indexed(IY), Indexed(IY)),
    RES(3, Indexed(IY), Register(A)),

    // Ax
    RES(4, Indexed(IY), Register(B)),
    RES(4, Indexed(IY), Register(C)),
    RES(4, Indexed(IY), Register(D)),
    RES(4, Indexed(IY), Register(E)),
    RES(4, Indexed(IY), Register(H)),
    RES(4, Indexed(IY), Register(L)),
    RES(4, Indexed(IY), Indexed(IY)),
    RES(4, Indexed(IY), Register(A)),
    RES(5, Indexed(IY), Register(B)),
    RES(5, Indexed(IY), Register(C)),
    RES(5, Indexed(IY), Register(D)),
    RES(5, Indexed(IY), Register(E)),
    RES(5, Indexed(IY), Register(H)),
    RES(5, Indexed(IY), Register(L)),
    RES(5, Indexed(IY), Indexed(IY)),
    RES(5, Indexed(IY), Register(A)),

    // Bx
    RES(6, Indexed(IY), Register(B)),
    RES(6, Indexed(IY), Register(C)),
    RES(6, Indexed(IY), Register(D)),
    RES(6, Indexed(IY), Register(E)),
    RES(6, Indexed(IY), Register(H)),
    RES(6, Indexed(IY), Register(L)),
    RES(6, Indexed(IY), Indexed(IY)),
    RES(6, Indexed(IY), Register(A)),
    RES(7, Indexed(IY), Register(B)),
    RES(7, Indexed(IY), Register(C)),
    RES(7, Indexed(IY), Register(D)),
    RES(7, Indexed(IY), Register(E)),
    RES(7, Indexed(IY), Register(H)),
    RES(7, Indexed(IY), Register(L)),
    RES(7, Indexed(IY), Indexed(IY)),
    RES(7, Indexed(IY), Register(A)),

    // Cx
    SET(0, Indexed(IY), Register(B)),
    SET(0, Indexed(IY), Register(C)),
    SET(0, Indexed(IY), Register(D)),
    SET(0, Indexed(IY), Register(E)),
    SET(0, Indexed(IY), Register(H)),
    SET(0, Indexed(IY), Register(L)),
    SET(0, Indexed(IY), Indexed(IY)),
    SET(0, Indexed(IY), Register(A)),
    SET(1, Indexed(IY), Register(B)),
    SET(1, Indexed(IY), Register(C)),
    SET(1, Indexed(IY), Register(D)),
    SET(1, Indexed(IY), Register(E)),
    SET(1, Indexed(IY), Register(H)),
    SET(1, Indexed(IY), Register(L)),
    SET(1, Indexed(IY), Indexed(IY)),
    SET(1, Indexed(IY), Register(A)),

    // Dx
    SET(2, Indexed(IY), Register(B)),
    SET(2, Indexed(IY), Register(C)),
    SET(2, Indexed(IY), Register(D)),
    SET(2, Indexed(IY), Register(E)),
    SET(2, Indexed(IY), Register(H)),
    SET(2, Indexed(IY), Register(L)),
    SET(2, Indexed(IY), Indexed(IY)),
    SET(2, Indexed(IY), Register(A)),
    SET(3, Indexed(IY), Register(B)),
    SET(3, Indexed(IY), Register(C)),
    SET(3, Indexed(IY), Register(D)),
    SET(3, Indexed(IY), Register(E)),
    SET(3, Indexed(IY), Register(H)),
    SET(3, Indexed(IY), Register(L)),
    SET(3, Indexed(IY), Indexed(IY)),
    SET(3, Indexed(IY), Register(A)),

    // Ex
    SET(4, Indexed(IY), Register(B)),
    SET(4, Indexed(IY), Register(C)),
    SET(4, Indexed(IY), Register(D)),
    SET(4, Indexed(IY), Register(E)),
    SET(4, Indexed(IY), Register(H)),
    SET(4, Indexed(IY), Register(L)),
    SET(4, Indexed(IY), Indexed(IY)),
    SET(4, Indexed(IY), Register(A)),
    SET(5, Indexed(IY), Register(B)),
    SET(5, Indexed(IY), Register(C)),
    SET(5, Indexed(IY), Register(D)),
    SET(5, Indexed(IY), Register(E)),
    SET(5, Indexed(IY), Register(H)),
    SET(5, Indexed(IY), Register(L)),
    SET(5, Indexed(IY), Indexed(IY)),
    SET(5, Indexed(IY), Register(A)),

    // Fx
    SET(6, Indexed(IY), Register(B)),
    SET(6, Indexed(IY), Register(C)),
    SET(6, Indexed(IY), Register(D)),
    SET(6, Indexed(IY), Register(E)),
    SET(6, Indexed(IY), Register(H)),
    SET(6, Indexed(IY), Register(L)),
    SET(6, Indexed(IY), Indexed(IY)),
    SET(6, Indexed(IY), Register(A)),
    SET(7, Indexed(IY), Register(B)),
    SET(7, Indexed(IY), Register(C)),
    SET(7, Indexed(IY), Register(D)),
    SET(7, Indexed(IY), Register(E)),
    SET(7, Indexed(IY), Register(H)),
    SET(7, Indexed(IY), Register(L)),
    SET(7, Indexed(IY), Indexed(IY)),
    SET(7, Indexed(IY), Register(A)),
];

pub const MISC_INSTRUCTIONS: [Opcode; 256] = [
    // 0x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // 1x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // 2x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // 3x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // 4x
    IN(Register(B), Register(C)),
    OUT(Register(C), Register(B)),
    SBC(RegisterPair(HL), RegisterPair(BC)),
    LD(Extended, RegisterPair(BC)),
    NEG,
    RETN,
    IM(0),
    LD(Register(I), Register(A)),
    IN(Register(C), Register(C)),
    OUT(Register(C), Register(C)),
    ADC(RegisterPair(HL), RegisterPair(BC)),
    LD(RegisterPair(BC), Extended),
    NOP,
    RETI,
    NOP,
    LD(Register(R), Register(A)),

    // 5x
    IN(Register(D), Register(C)),
    OUT(Register(C), Register(D)),
    SBC(RegisterPair(HL), RegisterPair(DE)),
    LD(Extended, RegisterPair(DE)),
    NOP,
    NOP,
    IM(1),
    LD(Register(A), Register(I)),
    IN(Register(E), Register(C)),
    OUT(Register(C), Register(E)),
    ADC(RegisterPair(HL), RegisterPair(DE)),
    LD(RegisterPair(DE), Extended),
    NOP,
    NOP,
    IM(2),
    LD(Register(A), Register(R)),

    // 6x
    IN(Register(H), Register(C)),
    OUT(Register(C), Register(H)),
    SBC(RegisterPair(HL), RegisterPair(HL)),
    LD(Extended, RegisterPair(HL)),
    NOP,
    NOP,
    NOP,
    RRD,
    IN(Register(L), Register(C)),
    OUT(Register(C), Register(L)),
    ADC(RegisterPair(HL), RegisterPair(HL)),
    LD(RegisterPair(HL), Extended),
    NOP,
    NOP,
    NOP,
    RLD,

    // 7x
    IN_Flags(Register(C)),
    OUT_Zero(Register(C)),
    SBC(RegisterPair(HL), RegisterPair(SP)),
    LD(Extended, RegisterPair(SP)),
    NOP,
    NOP,
    NOP,
    NOP,
    IN(Register(A), Register(C)),
    OUT(Register(C), Register(A)),
    ADC(RegisterPair(HL), RegisterPair(SP)),
    LD(RegisterPair(SP), Extended),
    NOP,
    NOP,
    NOP,
    NOP,

    // 8x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // 9x
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Ax
    LDI,
    CPI,
    INI,
    OUTI,
    NOP,
    NOP,
    NOP,
    NOP,
    LDD,
    CPD,
    IND,
    OUTD,
    NOP,
    NOP,
    NOP,
    NOP,

    // Bx
    LDIR,
    CPIR,
    INIR,
    OUTIR,
    NOP,
    NOP,
    NOP,
    NOP,
    LDDR,
    CPDR,
    INDR,
    OUTDR,
    NOP,
    NOP,
    NOP,
    NOP,

    // Cx
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Dx
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Ex
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,

    // Fx
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
    NOP,
];